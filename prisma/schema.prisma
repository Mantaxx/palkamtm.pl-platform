// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("BUYER")
  isActive      Boolean   @default(false)
  activationToken String?
  
  // Address information
  address       String?
  city          String?
  postalCode    String?
  phoneNumber   String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // User specific data
  auctions           Auction[]
  bids               Bid[]
  watchlist          WatchlistItem[]
  messages           Message[]
  buyerTransactions  Transaction[] @relation("BuyerTransactions")
  sellerTransactions Transaction[] @relation("SellerTransactions")
  breederMeetings    BreederMeeting[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pigeon {
  id          String   @id @default(cuid())
  name        String
  ringNumber  String   @unique
  bloodline   String
  gender      String
  birthDate   DateTime
  color       String
  weight      Float
  breeder     String
  description String?
  images      String
  videos      String
  pedigree    String?
  achievements String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  auctions Auction[]
}

model Auction {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  pigeonId    String?
  pigeon      Pigeon?     @relation(fields: [pigeonId], references: [id])
  sellerId    String
  seller      User        @relation(fields: [sellerId], references: [id])
  
  // Auction details
  startingPrice Float
  currentPrice  Float
  buyNowPrice   Float?
  reservePrice  Float?
  
  // Timing
  startTime     DateTime
  endTime       DateTime
  status        String        @default("ACTIVE")
  isApproved    Boolean       @default(false)
  
  // Additional data
  images        String
  videos        String
  documents     String
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bids         Bid[]
  watchlist    WatchlistItem[]
  messages     Message[]
  transactions Transaction[]

  @@index([isApproved])
}

model Bid {
  id        String   @id @default(cuid())
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId  String
  bidder    User     @relation(fields: [bidderId], references: [id])
  amount    Float
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([auctionId])
  @@index([bidderId])
}

model WatchlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Message {
  id        String   @id @default(cuid())
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([auctionId])
  @@index([senderId])
}

model Transaction {
  id          String            @id @default(cuid())
  auctionId   String
  auction     Auction           @relation(fields: [auctionId], references: [id])
  buyerId     String
  buyer       User              @relation("BuyerTransactions", fields: [buyerId], references: [id])
  sellerId    String
  seller      User              @relation("SellerTransactions", fields: [sellerId], references: [id])
  amount      Float
  commission  Float
  status      String            @default("PENDING")
  paymentId   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([auctionId])
  @@index([buyerId])
  @@index([sellerId])
}

model Reference {
  id          String   @id @default(cuid())
  breederName String
  location    String
  experience  String
  testimonial String
  rating      Int      @default(5)
  achievements String  // JSON string of achievements array
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isApproved])
}

model BreederMeeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String?
  meetingDate DateTime?
  breederName String
  images      String   // JSON string of image paths array
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isApproved])
  @@index([uploadedBy])
}


